#! /bin/bash

# CREATE openssl.cnf if it doesn't exist

openvpn=`type -p openvpn`

clientconfig() {
    NAME="$1"
    OVPN="$2"
    [ -f $OVPN ] ||
    echo > $OVPN "remote `hostname -f`
rport 1194
dev tun
tun-mtu 1500
client
verify-x509-name server name
ping-restart 60
ping-timer-rem
persist-tun
persist-key
resolv-retry 86400
ping 10
verb 4
mute 10
fragment 1350
mssfix
<ca>
$(cat my-ca.crt)
</ca>
<cert>
$(cat $NAME.crt ; rm $NAME.crt )
</cert>
<key>
$(cat $NAME.key ; rm $NAME.key )
</key>
<tls-auth>
$(cat ta.key)
</tls-auth>
" 
}

function banner()
{
echo "# ####"
echo "# $@"
}


function openssl()
{
	command openssl "$@" -config ssl/openssl.cnf
}

# Set up an openssl CA environment
function setupopenssl()
{
mkdir -p ssl

[ -e ssl/index.txt.attr ] || { touch ssl/index.txt.attr ; }
[ -e ssl/index.txt ] || touch ssl/index.txt
[ -s ssl/serial ] || echo 01 > ssl/serial

[ -e ssl/openssl.cnf ] || {
cat > ssl/openssl.cnf << "EOF"

#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
RANDFILE		= .rnd

# Extra OBJECT IDENTIFIER info:
#oid_file		= $ENV::HOME/.oid
oid_section		= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

unique_subject	= no			# Set to 'no' to allow creation of duplicates
dir		= ssl			# Where everything is kept
certs		= $dir			# Where the issued certs are kept
crl_dir		= $dir			# Where the issued crl are kept
database	= $dir/index.txt	# database index file.
new_certs_dir	= $dir			# default place for new certs.

certificate	= ./my-ca.crt 	# The CA certificate
serial		= $dir/serial 		# The current serial number
crl		= $dir/crl.pem 		# The current CRL
private_key	= $dir/my-ca.key 	# The private key
RANDFILE	= $dir/.rand		# private random number file

x509_extensions	= usr_cert		# The extentions to add to the cert

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crl_extensions	= crl_ext

default_days	= 7300			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= sha256		# which md to use.
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 2048
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions	= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString.
# utf8only: only UTF8Strings.
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
string_mask = nombstr

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= ZA
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= Somewhere

localityName			= Locality Name (eg, city)
localityName_default		= Someplace

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= Somepeople

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= World Wide Web Pty Ltd

organizationalUnitName		= Organizational Unit Name (eg, section)
#organizationalUnitName_default	=

commonName			= Common Name (eg, your name or your server\'s hostname)
commonName_default		= $ENV::KEY_COMMONNAME
commonName_max			= 64

emailAddress			= Email Address
emailAddress_default		= someone@somewhere.else
emailAddress_max		= 40

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always

[ server ]
extendedKeyUsage=serverAuth
keyUsage = digitalSignature, keyEncipherment
EOF

}


}


# create an SSL key
function dossl()
{
    CLIENTNAME="$1"
    banner "Making key named $CLIENTNAME"

    if [ -s ssl/my-ca.key -a -s my-ca.crt ] ; then
        echo "CA: my-ca.key and my-ca.crt exist"
    else
        banner "Creating Certificate Authority: my-ca.{key,crt}"
        export KEY_COMMONNAME="my-ca"
        yes '' | openssl req -nodes -new -x509 -keyout ssl/my-ca.key -out my-ca.crt -days 7300
    fi

    if [ -s $CLIENTNAME.ovpn ] ; then
        banner "$CLIENTNAME config already exists"
    else
        export KEY_COMMONNAME="$CLIENTNAME"
        banner "Creating certificate signing request $CLIENTNAME.csr"
        yes '' | openssl req -nodes -new -keyout $CLIENTNAME.key -out $CLIENTNAME.csr
        banner "Certificate authority signing certificate => $CLIENTNAME.crt"
        echo -ne 'y\ny\n' |
        openssl ca -passin '' -key '' -out $CLIENTNAME.crt -in $CLIENTNAME.csr
        # Hey, we don't want it anyhow
        rm $CLIENTNAME.csr
        # Copy keys to a private dir for that user
        # banner "Output directory is ./$CLIENTNAME"
    fi

    if [ -s dh2048.pem ] ; then
        true # echo "Have dh2048.pem"
    else
        banner "Creating dh2048.pm for tls-server"
        command openssl dhparam -out dh2048.pem 2048
    fi

    if [ -s ta.key ] ; then
        true # echo "Have ta.key"
    else
        banner "Creating shared ta.key for HMAC authentication"
        command $openvpn --secret ta.key --genkey
        chmod 644 ta.key
    fi

    if [ -s server.conf -o "$CLIENTNAME" = server ] ; then
        true # echo "Have ta.key"
    else
        banner "Creating sample server.conf"
        [ -s server.conf ] || dossl server
        echo "port 1194
proto udp
dev tun
<ca>
$(cat my-ca.crt)
</ca>
<cert>
$(cat server.crt)
</cert>
<key>
$(cat server.key)
</key>
<dh>
$(cat dh2048.pem)
</dh>
server 10.$((RANDOM%256)).$((RANDOM%256)).0 255.255.255.0
ifconfig-pool-persist ipp.txt
push \"route 192.168.0.0 255.255.0.0\"
push \"route-delay 2 600\"
push \"dhcp-option WINS 192.168.0.1\"
push \"dhcp-option NBT type 8\"
client-to-client
keepalive 10 120
user nobody
group nobody
persist-key
persist-tun
status openvpn-status.log
verb 4
<tls-auth>
$(cat ta.key)
</tls-auth>
fragment 1350
mssfix
" > server.conf
        true # eyah 
    fi
}


case "$1" in
	--ssl)
		setupopenssl
                shift
                for N in "$@" ; do
                    dossl "$N"
                    clientconfig "$N" "$N.ovpn"
                done
		;;
	*)
		echo "Usage:"
		echo "   $0 --ssl keyname [keyname...]   Create a new client key (and CA if necessary)"
		;;
esac

